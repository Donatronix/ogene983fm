<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="pcsg-generated-ruleset">
    <description>Created with the PHP Coding Standard Generator. http://edorian.github.com/php-coding-standard-generator/
    </description>
    <rule ref="Generic.Classes.DuplicateClassName"/>
    <rule ref="Generic.CodeAnalysis.EmptyStatement"/>
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    <rule ref="Generic.Debug.ClosureLinter"/>
    <rule ref="Generic.Debug.JSHint"/>
    <rule ref="Generic.Debug.CSSLint"/>
    <rule ref="Generic.Files.ByteOrderMark"/>
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <rule ref="Generic.NamingConventions.CamelCapsFunctionName"/>
    <rule ref="Generic.PHP.DisallowShortOpenTag"/>
    <rule ref="Generic.PHP.ForbiddenFunctions"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Generic.Strings.UnnecessaryStringConcat"/>
    <!-- <rule ref="PEAR.Commenting.ClassComment"/> -->
    <rule ref="PEAR.Commenting.FunctionComment"/>
    <rule ref="PEAR.Commenting.InlineComment"/>
    <rule ref="PEAR.Functions.ValidDefaultValue"/>
    <rule ref="PEAR.NamingConventions.ValidFunctionName"/>
    <!-- <rule ref="PEAR.NamingConventions.ValidVariableName"/> -->
    <rule ref="PSR2.Classes.ClassDeclaration"/>
    <rule ref="PSR2.Classes.PropertyDeclaration"/>
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>
    <rule ref="PSR2.Methods.MethodDeclaration"/>
    <rule ref="PSR2.Namespaces.NamespaceDeclaration"/>
    <rule ref="PSR2.Namespaces.UseDeclaration"/>
    <rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>

    <!--
    You can hard-code ignore patterns directly into your
    custom standard so you don't have to specify the
    patterns on the command line.

    The following two tags are equivalent to the command line
    argument:
 -->
    <exclude-pattern>*\data\*</exclude-pattern>
    <exclude-pattern>*/data/*</exclude-pattern>
    <exclude-pattern>*\scripts\*</exclude-pattern>
    <exclude-pattern>*/scripts/*</exclude-pattern>
    <exclude-pattern>*\tests\*</exclude-pattern>
    <exclude-pattern>*/tests/*</exclude-pattern>

    <!--
    If you want to completely disable an error message in a sniff
    but you don't want to exclude the whole sniff, you can
    change the severity of the message to 0. In this case, we
    want the Squiz DoubleQuoteUsage sniff to be included in our
    standard, but we don't want the ContainsVar error message to
    ever be displayed.
 -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
        <severity>0</severity>
    </rule>

    <!--
    There is a special internal error message produced by PHP_CodeSniffer
    when it is unable to detect code in a file, possible due to
    the use of short open tags even though php.ini disables them.
    You can disable this message in the same way as sniff messages.

    Again, the code here will be displayed in the PHP_CodeSniffer
    output when using the -s command line argument while checking a file.
 -->
    <rule ref="Internal.NoCodeFound">
        <severity>0</severity>
    </rule>

    <!--
    You can also hard-code ignore patterns for specific sniffs,
    a feature not available on the command line.

    The code here will hide all messages from the Squiz DoubleQuoteUsage
    sniff for files that match either of the two exclude patterns.
 -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage">
        <exclude-pattern>*\data\*</exclude-pattern>
        <exclude-pattern>*/data/*</exclude-pattern>
        <exclude-pattern>*\scripts\*</exclude-pattern>
        <exclude-pattern>*/scripts/*</exclude-pattern>
        <exclude-pattern>*\tests\*</exclude-pattern>
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>

    <!--
    You can also be more specific and just exclude some messages.

    The code here will just hide the ContainsVar error generated by the
    Squiz DoubleQuoteUsage sniff for files that match either of the two
    exclude patterns.
 -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
        <exclude-pattern>*\data\*</exclude-pattern>
        <exclude-pattern>*/data/*</exclude-pattern>
        <exclude-pattern>*\scripts\*</exclude-pattern>
        <exclude-pattern>*/scripts/*</exclude-pattern>
        <exclude-pattern>*\tests\*</exclude-pattern>
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>
</ruleset>
